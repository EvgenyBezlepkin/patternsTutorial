package structural.bridge;

import structural.bridge.draw.Draw;
import structural.bridge.draw.DrawCircle;
import structural.bridge.shape.Circle;
import structural.bridge.shape.Point;
import structural.bridge.shape.Shape;

public class App {

    public static void main(String[] args) {

        Point p = new Point(1,2);
        Draw d = new DrawCircle();
        Shape s = new Circle(p, 5, d);

        s.draw.draw();
    }

    /*
    Разделяет абстракцию и реализацию так, чтобы они могли изменяться независимо
    При реализации через шаблон мост, изменение структуры интерфейса не мешает изменению структуры реализации.
    Рассмотрим такую абстракцию как фигура. Каждая фигура должна уметь рисовать себя, масштабироваться и тд.
    В то же время рисование графики может отличаться в зависимости от типа ОС, или графической библиотеки.
    Фигуры должны иметь возможность рисовать себя в различных графических средах,
    но реализовывать в каждой фигуре все способы рисования или модифицировать фигуру каждый раз при изменении способа рисования непрактично.
    Паттер мост говорит отделить некоторую абстракцию (например, рисование) в отдельный интерфейс со своими реализациями.
    Далее ссылка на интерфейс помещается в абстрактный класс фигур и определяет одноименный метод.
     */

}
